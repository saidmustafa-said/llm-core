API Flows with Detailed Function Calls
=====================================

POST /message
----------------
api{process_message} 
→ main{process_request} 
→ src.flow_manager{FlowManager.process_user_input}
    ├── src.managers.history.history_manager{HistoryManager.log_user_message}
    ├── src.managers.state.state_manager{StateManager.get_session}
    ├── src.managers.state.state_manager{StateManager.create_session} (if session not found)
    ├── src.managers.history.history_manager{HistoryManager.get_formatted_history}
    │
    ├── If state is "initial" or "new_query":
    │   → _process_query
    │       ├── src.poi_manager{POIManager.get_poi_data}
    │       ├── src.llamarequest{llm_api}
    │       │
    │       ├── If clarification needed:
    │       │   ├── src.managers.history.history_manager{HistoryManager.log_assistant_message}
    │       │   └── src.managers.state.state_manager{StateManager.save_session}
    │       │
    │       ├── If subcategories found:
    │       │   ├── src.poi_manager{POIManager.get_poi_data} (with subcategories)
    │       │   ├── src.get_top_candidates{find_top_candidates}
    │       │   ├── src.get_location_advice{get_location_advice}
    │       │   ├── src.managers.history.history_manager{HistoryManager.log_assistant_message}
    │       │   └── src.managers.state.state_manager{StateManager.save_session}
    │       │
    │       └── If location redirection needed:
    │           → _direct_location_search
    │               ├── src.poi_manager{POIManager.get_poi_data}
    │               ├── src.llamarequest{llm_api}
    │               ├── src.poi_manager{POIManager.get_poi_data} (with subcategories)
    │               ├── src.get_top_candidates{find_top_candidates}
    │               ├── src.get_location_advice{get_location_advice}
    │               ├── src.managers.history.history_manager{HistoryManager.log_assistant_message}
    │               └── src.managers.state.state_manager{StateManager.save_session}
    │
    ├── If state is "providing_advice":
    │   → _handle_advice_continuation
    │       ├── src.get_location_advice{get_location_advice}
    │       ├── src.managers.history.history_manager{HistoryManager.log_assistant_message}
    │       └── src.managers.state.state_manager{StateManager.save_session}
    │
    └── If state is "clarification_needed":
        → _handle_clarification
            └── (recursively calls _process_query with new input)


POST /session
----------------
api{create_new_session} 
→ main{create_session} 
→ src.flow_manager{FlowManager.create_new_session}
    └── src.managers.state.state_manager{StateManager.create_session}


GET /session/{user_id}/{session_id}/history
----------------
api{get_history} 
→ main{get_session_history} 
→ src.managers.history.history_manager{HistoryManager.get_formatted_history}


GET /session/{user_id}/{session_id}/messages
----------------
api{get_messages} 
→ main{get_session_messages} 
→ src.managers.history.history_manager{HistoryManager.get_history}


Middleware (every request)
----------------
api{logging_middleware} 
→ src.logger_setup{session_logger.start_session} 
+ src.logger_setup{get_logger}


GET /health
----------------
api{health_check}


Key Function Dependencies
========================

1. State Management:
   - StateManager.get_session
   - StateManager.create_session
   - StateManager.save_session

2. History Management:
   - HistoryManager.log_user_message
   - HistoryManager.log_assistant_message
   - HistoryManager.get_formatted_history
   - HistoryManager.get_history

3. Location Services:
   - POIManager.get_poi_data
   - find_top_candidates
   - get_location_advice

4. LLM Integration:
   - llm_api






I'll help you organize your project structure within the `src` directory. Let me first analyze the current structure and then suggest a better organization.

Let me check the contents of the subdirectories to get a complete picture.


Ran tool

Ran tool

Ran tool
Based on the current structure and the code I've analyzed, I'll propose a better organization that follows Python best practices and makes the codebase more maintainable. Here's my suggested reorganization:

1. First, let me create a new structure that better organizes the code by functionality:



```bash
mkdir -p src/{core,api,services,models,utils,config}
```
I apologize for the command rejection. Let me explain the proposed structure and then we can implement it step by step:

```
src/
├── core/                  # Core business logic
│   ├── flow/             # Flow management
│   ├── state/            # State management
│   └── history/          # History management
├── api/                  # API-related code
│   ├── routes/           # API routes
│   └── middleware/       # API middleware
├── services/             # Business services
│   ├── llm/             # LLM-related services
│   ├── location/        # Location-related services
│   └── poi/             # POI-related services
├── models/              # Data models and interfaces
│   ├── data_types.py    # (moved from root)
│   └── interfaces/      # Interface definitions
├── utils/               # Utility functions
│   ├── logger.py        # (moved from logger_setup.py)
│   └── helpers.py       # (moved from utils.py)
└── config/              # Configuration management
    └── config.py        # (moved from config_manager.py)
```

Let me explain the rationale for this organization:

1. **core/**: Contains the fundamental business logic components
   - `flow/`: Flow management logic
   - `state/`: State management
   - `history/`: History tracking

2. **api/**: All API-related code
   - `routes/`: API endpoint definitions
   - `middleware/`: API middleware like logging

3. **services/**: Business logic services
   - `llm/`: LLM-related services
   - `location/`: Location-related services
   - `poi/`: POI-related services

4. **models/**: Data structures and interfaces
   - Moved interfaces here for better organization
   - Data type definitions

5. **utils/**: Utility functions and helpers
   - Logging setup
   - Helper functions

6. **config/**: Configuration management
   - Configuration loading and management

Would you like me to proceed with implementing this reorganization? I can help you move the files to their new locations and update the imports accordingly. This will make the codebase more maintainable and easier to navigate.

The benefits of this reorganization include:
1. Better separation of concerns
2. More intuitive file locations
3. Easier to find related code
4. Better scalability for future additions
5. Clearer dependencies between components

Would you like me to proceed with the reorganization? I can help you move the files one section at a time to ensure everything works correctly.



